@model Zebra.ViewModels.AdminCategory.Common.VMShop

<script type="text/javascript" 
        src="http://maps.googleapis.com/maps/api/js?key=AIzaSyA7k7SS5PPnXshOKOjBoHUG33IVZIRzjs8&libraries=places">
</script>

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm("Edit", "AdminShop", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NIP, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.NIP, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NIP, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Regon, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Regon, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Regon, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model != null && Model.Localization != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Localization, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    
                    <input class="form-control col-md-10" 
                           id="localization" 
                           value="@Model.Localization.Address" 
                           placeholder="Wybierz miejsce" />
                    
                    <div id="warning" style="color: red;">
                        <p>Wybierz miejsce z listy</p>
                    </div>
                    @Html.HiddenFor(x => Model.Localization.Address)
                    @Html.HiddenFor(x => Model.Localization.Longitude)
                    @Html.HiddenFor(x => Model.Localization.Latitude)
                    @Html.HiddenFor(x => Model.Localization.City)
                    @Html.HiddenFor(x => Model.Localization.Country)
                    @Html.HiddenFor(x => Model.Localization.Region)
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>



<script>

    $(document).ready(function () {

        $("#warning").hide();
        var places = new google.maps.places.Autocomplete(document.getElementById('localization')); 
        google.maps.event.addListener(places, 'load', function () {                    
            setGeoData(places);
        });

        google.maps.event.addListener(places, 'place_changed', function () {  

            setGeoData(places);
            $("#warning").hide();
        });

    });

    $("#txtPlaces").keyup(function () {
        $("#country").val(null);
        $("#region").val(null);
        $("#city").val(null);
        $("#address").val(null);
        $("#latitude").val(null);          // getting latitude
        $("#longitude").val(null);         // getting longitude

        $("#warning").show();
    });


    function setGeoData(places) {

        var place = places.getPlace();
        var address = place.formatted_address;
        var addressComponents = place.address_components;

        $("#Localization_Country").val(getElem(addressComponents, "country"));
        $("#Localization_Region").val(getElem(addressComponents, "region"));
        $("#Localization_City").val(getElem(addressComponents, "city"));
        $("#Localization_Address").val(address);
        $("#Localization_Latitude").val(place.geometry.location.lat());
        $("#Localization_Longitude").val(place.geometry.location.lng());
    }

    function getElem(addressComponents, elem) {

        switch (elem) {
            case "country":
                return getValue(addressComponents, "country");
                break;
            case "city":
                return getValue(addressComponents, "locality");
                break;
            case "region":
                return getValue(addressComponents, "administrative_area_level_1");
                break;
            case "address":
                if (getValue(addressComponents, "street_number") == null)
                    return getValue(addressComponents, "route")
                else
                    return getValue(addressComponents, "route") + " " + getValue(addressComponents, "street_number");
                break;
            default:
                return "";
                break;
        }

        function getValue(addressComponents, elem) {
            var result = "";
            for (var i = 0; i < addressComponents.length; i++) {
                for (var j = 0; j < addressComponents[i].types.length; j++) {
                    if (addressComponents[i].types[j] == elem) {
                        result = addressComponents[i].long_name;
                    }
                }
            }
            return result
        }
    }

</script>
